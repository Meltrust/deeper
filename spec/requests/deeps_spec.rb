require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/deeps', type: :request do
  # Deep. As you add validations to Deep, be sure to
  # adjust the attributes here as well.

  let(:valid_attributes) do
    { text: 'hi', user: @user }
  end

  let(:invalid_attributes) do
    { text: '' }
  end

  before(:each) do
    @user = FactoryBot.create(:user)

    sign_in @user
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      Deep.create! valid_attributes
      get deeps_url
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Deep' do
        expect do
          post deeps_url, params: { deep: valid_attributes }
        end.to change(Deep, :count).by(1)
      end

      it 'redirects to the created deep' do
        post deeps_url, params: { deep: valid_attributes }
        expect(response).to redirect_to(root_path)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Deep' do
        expect do
          post deeps_url, params: { deep: invalid_attributes }
        end.to change(Deep, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        get root_path, params: { deep: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end
end
